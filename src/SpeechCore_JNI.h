#pragma once
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SpeechCore */

#ifndef _Included_SpeechCore
#define _Included_SpeechCore
#ifdef __cplusplus
extern "C" {
#endif
#undef SpeechCore_SC_SPEECH_FLOW_CONTROL
#define SpeechCore_SC_SPEECH_FLOW_CONTROL 1L
#undef SpeechCore_SC_SPEECH_PARAMETER_CONTROL
#define SpeechCore_SC_SPEECH_PARAMETER_CONTROL 2L
#undef SpeechCore_SC_VOICE_CONFIG
#define SpeechCore_SC_VOICE_CONFIG 4L
#undef SpeechCore_SC_FILE_OUTPUT
#define SpeechCore_SC_FILE_OUTPUT 8L
#undef SpeechCore_SC_HAS_SPEECH
#define SpeechCore_SC_HAS_SPEECH 16L
#undef SpeechCore_SC_HAS_BRAILLE
#define SpeechCore_SC_HAS_BRAILLE 32L
/*
 * Class:     SpeechCore
 * Method:    Speech_Init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Init
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Free
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Free
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Detect_Driver
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Detect_1Driver
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Current_Driver
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SpeechCore_Speech_1Current_1Driver
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Driver
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SpeechCore_Speech_1Get_1Driver
  (JNIEnv *, jobject, jint);

/*
 * Class:     SpeechCore
 * Method:    Speech_Set_Driver
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Set_1Driver
  (JNIEnv *, jobject, jint);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Drivers
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SpeechCore_Speech_1Get_1Drivers
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Get_Speech_Flags
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SpeechCore_Get_1Speech_1Flags
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Is_Loaded
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SpeechCore_Speech_1Is_1Loaded
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Is_speaking
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SpeechCore_Speech_1Is_1speaking
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Output
 * Signature: (Ljava/lang/String;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_SpeechCore_Speech_1Output
  (JNIEnv *, jobject, jstring, jboolean);

/*
 * Class:     SpeechCore
 * Method:    Speech_Braille
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_SpeechCore_Speech_1Braille
  (JNIEnv *, jobject, jstring);

/*
 * Class:     SpeechCore
 * Method:    Speech_Stop
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SpeechCore_Speech_1Stop
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Volume
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_SpeechCore_Speech_1Get_1Volume
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Set_Volume
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Set_1Volume
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Rate
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_SpeechCore_Speech_1Get_1Rate
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Set_Rate
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Set_1Rate
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Current_Voice
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SpeechCore_Speech_1Get_1Current_1Voice
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Voice
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SpeechCore_Speech_1Get_1Voice
  (JNIEnv *, jobject, jint);

/*
 * Class:     SpeechCore
 * Method:    Speech_Set_voice
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Set_1voice
  (JNIEnv *, jobject, jint);

/*
 * Class:     SpeechCore
 * Method:    Speech_Get_Voices
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SpeechCore_Speech_1Get_1Voices
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Output_File
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Output_1File
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     SpeechCore
 * Method:    Speech_Resume
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Resume
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_pause
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1pause
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Speech_Prefer_Sapi
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Speech_1Prefer_1Sapi
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     SpeechCore
 * Method:    Speech_Sapi_loaded
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SpeechCore_Speech_1Sapi_1loaded
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Init
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Release
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Release
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Get_Current_Voice
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SpeechCore_Sapi_1Get_1Current_1Voice
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Get_Voice
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_SpeechCore_Sapi_1Get_1Voice
  (JNIEnv *, jobject, jint);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Set_Voice
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Set_1Voice
  (JNIEnv *, jobject, jstring);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Set_Voice_By_Index
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Set_1Voice_1By_1Index
  (JNIEnv *, jobject, jint);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Get_Voices
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SpeechCore_Sapi_1Get_1Voices
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Voice_Get_Volume
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_SpeechCore_Sapi_1Voice_1Get_1Volume
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Voice_Set_Volume
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Voice_1Set_1Volume
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Voice_Get_Rate
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_SpeechCore_Sapi_1Voice_1Get_1Rate
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Voice_Set_Rate
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Voice_1Set_1Rate
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Speak
 * Signature: (Ljava/lang/String;ZZ)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Speak
  (JNIEnv *, jobject, jstring, jboolean, jboolean);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Output_File
 * Signature: (Ljava/lang/String;Ljava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Output_1File
  (JNIEnv *, jobject, jstring, jstring, jboolean);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Pause
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Pause
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Resume
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Resume
  (JNIEnv *, jobject);

/*
 * Class:     SpeechCore
 * Method:    Sapi_Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SpeechCore_Sapi_1Stop
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
